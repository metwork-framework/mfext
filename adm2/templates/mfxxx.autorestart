#!/bin/bash

function usage() {
    echo "usage: {{MODULE_LOWERCASE}}.autorestart"
    echo "  => autorestart the module if there is a problem with {{MODULE_LOWERCASE}}.status"
}

function module_status() {
    timeout 60s {{MODULE_LOWERCASE}}.status >/dev/null 2>&1
    if test $? -ne 0; then
        echo "ko"
    else
        echo "ok"
    fi
}

function module_stopped() {
    STATUS_FILE=$(cat "${MODULE_RUNTIME_HOME}/var/status" 2>/dev/null)
    if test "${STATUS_FILE}" = ""; then
        echo "yes"
        return
    fi
    if test "${STATUS_FILE}" = "STOPPED"; then
        echo "yes"
        return
    fi
    echo "no"
}

function module_starting_stopping() {
    STATUS_FILE=$(cat "${MODULE_RUNTIME_HOME}/var/status" 2>/dev/null)
    if test "${STATUS_FILE}" = "STARTING"; then
        echo "yes"
        return
    fi
    if test "${STATUS_FILE}" = "STOPPING"; then
        echo "yes"
        return
    fi
    echo "no"
}

if test "${1:-}" = "--help"; then
    usage
    exit 0
fi

STOPPED=$(module_stopped)
if test "${STOPPED}" = "yes"; then
    log INFO "the module {{MODULE_LOWERCASE}} is stopped => we do nothing"
    exit 0
fi

STARTING_STOPPING=$(module_starting_stopping)
if test "${STARTING_STOPPING}" = "yes"; then
    find "${MODULE_RUNTIME_HOME}/var/status" -type f -mmin +10 -delete 2>/dev/null
    STARTING_STOPPING=$(module_starting_stopping)
    if test "${STARTING_STOPPING}" = "yes"; then
        log INFO "the module {{MODULE_LOWERCASE}} is changing state => we do nothing"
        exit 0
    fi
    log WARNING "the module {{MODULE_LOWERCASE}} was starting/stopping since mode than 10 minutes => forcing state"
fi

STATUS=$(module_status)
if test "${STATUS}" = "ok"; then
    log INFO "the {{MODULE_LOWERCASE}} seems to be ok and does not need to be restarted"
    echo "RUNNING" >"${MODULE_RUNTIME_HOME}/var/status"
    exit 0
else
    echo "ERROR" > "${MODULE_RUNTIME_HOME}/var/status"
fi

log WARNING "bad return code from {{MODULE_LOWERCASE}}.status => let's wait 30s and retry"
sleep 30

STATUS=$(module_status)
if test "${STATUS}" = "ok"; then
    log WARNING "the {{MODULE_LOWERCASE}}.status seems to be ok now => we do nothing"
    echo "RUNNING" >"${MODULE_RUNTIME_HOME}/var/status"
    exit 0
fi

log CRITICAL "the {{MODULE_LOWERCASE}}.status is not ok (after two attempts) => let's restart the module"

log INFO "launching {{MODULE_LOWERCASE}}.stop (with a 300s timeout)"
timeout 300s {{MODULE_LOWERCASE}}.stop

log INFO "launching {{MODULE_LOWERCASE}}.start (with a 300s timeout)"
timeout 300s {{MODULE_LOWERCASE}}.start

log INFO "sleeping 30s"
sleep 30

STATUS=$(module_status)
if test "${STATUS}" != "ok"; then
    log CRITICAL "the {{MODULE_LOWERCASE}}.status is still not ok (even after a module restart) => BIG PROBLEM"
    echo "ERROR" > "${MODULE_RUNTIME_HOME}/var/status"
    exit 1
else
    log CRITICAL "the {{MODULE_LOWERCASE}}.status is now ok after the automatic stop/start => no problem anymore"
    echo "RUNNING" >"${MODULE_RUNTIME_HOME}/var/status"
    exit 0
fi
