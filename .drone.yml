pipeline:
  bootstrap:
    image: metwork/mfext-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    pull: true
    commands:
      - if test "$${FORCED_OS_VERSION}" != ""; then if test "$${FORCED_OS_VERSION}" != "${OS_VERSION}"; then echo "step bypass"; exit 0; fi; fi
      - mkdir -p /opt/metwork-mfext-${DRONE_BRANCH}
      - ./bootstrap.sh /opt/metwork-mfext-${DRONE_BRANCH}
      - cat adm/root.mk
      - CACHE_HASH=`./adm2/_build_cache_hash.sh .`
      - if ! test -f /buildcache/build_mfext_${DRONE_BRANCH}_$${CACHE_HASH}; then echo $${CACHE_HASH} >.drone_cache; fi
    volumes:
      - /buildcache:/buildcache
    when:
      event: [push]
  build:
    image: metwork/mfext-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    commands:
      - if test "$${FORCED_OS_VERSION}" != ""; then if test "$${FORCED_OS_VERSION}" != "${OS_VERSION}"; then echo "step bypass"; exit 0; fi; fi
      - if ! test -f .drone_cache; then echo "build bypass"; exit 0; fi
      - export METWORK_BUILD_OS=${OS_VERSION}
      - mkdir -p /opt/metwork-mfext-${DRONE_BRANCH}
      - mkdir -p /pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfext/${OS_VERSION}/${DRONE_BUILD_NUMBER}
      - make >/pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfext/${OS_VERSION}/${DRONE_BUILD_NUMBER}/make.log 2>&1
      - make doc >>/pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfext/${OS_VERSION}/${DRONE_BUILD_NUMBER}/make.log 2>&1
      - rm -Rf html_doc
      - cp -Rf /opt/metwork-mfext-${DRONE_BRANCH}/html_doc .
      - make test >>/pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfext/${OS_VERSION}/${DRONE_BUILD_NUMBER}/make.log 2>&1
      - make RELEASE_BUILD=${DRONE_BUILD_NUMBER} rpm >>/pub/metwork/continuous_integration/buildlogs/${DRONE_BRANCH}/mfext/${OS_VERSION}/${DRONE_BUILD_NUMBER}/make.log 2>&1
      - mv /opt/metwork-mfext-${DRONE_BRANCH}/*.rpm .
    volumes:
      - /pub:/pub
    when:
      event: [push]
  publish_ci:
    image: metwork/mfext-${OS_VERSION}-buildimage:${DRONE_BRANCH}
    commands:
      - if test "$${FORCED_OS_VERSION}" != ""; then if test "$${FORCED_OS_VERSION}" != "${OS_VERSION}"; then echo "step bypass"; exit 0; fi; fi
      - if ! test -f .drone_cache; then echo "publish bypass"; exit 0; fi
      - mkdir -p /pub/metwork/continuous_integration/rpms/${DRONE_BRANCH}/${OS_VERSION}/
      - cp *.rpm /pub/metwork/continuous_integration/rpms/${DRONE_BRANCH}/${OS_VERSION}/
      - yum -y install createrepo
      - createrepo --update /pub/metwork/continuous_integration/rpms/${DRONE_BRANCH}/${OS_VERSION}
      - if test "${OS_VERSION}" = "centos6"; then rm -Rf /pub/metwork/continuous_integration/docs/${DRONE_BRANCH}/mfext; mkdir -p /pub/metwork/continuous_integration/docs/${DRONE_BRANCH}/mfext ; cp -Rf html_doc/* /pub/metwork/continuous_integration/docs/${DRONE_BRANCH}/mfext/ ; fi
      - touch /buildcache/build_mfext_${DRONE_BRANCH}_`cat .drone_cache`
    volumes:
      - /pub:/pub
      - /buildcache:/buildcache
    when:
      event: [push]
  trigger:
    image: plugins/downstream
    fork: true
    repositories:
      - metwork-framework/docker-mfcom-${OS_VERSION}-buildimage@${DRONE_BRANCH}
    secrets: [ downstream_token, downstream_server ]
    when:
      status: [ success ]
      event: push

matrix:
  OS_VERSION:
    - centos6
    - centos7

branches: [ master, integration ]
