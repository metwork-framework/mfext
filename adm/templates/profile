#!/bin/bash

export METWORK_PROFILE_LOADING=1

# We se the umask
umask 0022

# We set MFEXT_HOME
export MFEXT_HOME={{MFEXT_HOME}}
export MFEXT_VERSION={{MFEXT_VERSION}}

# We load bash_utils functions
# shellcheck disable=SC1091
. {{MFEXT_HOME}}/lib/bash_utils.sh

if test -f /etc/metwork.extraprofile; then
    # We load this extra profile if any
    # shellcheck disable=SC1091
    . /etc/metwork.extraprofile
fi

# Wet set MFMODULE, MFMODULE_HOME env variables
export MFMODULE={{MFMODULE}}
export MFMODULE_HOME={{MFMODULE_HOME}}
export MFMODULE_VERSION={{MFMODULE_VERSION}}
export {{MFMODULE}}_HOME={{MFMODULE_HOME}}
export {{MFMODULE}}_VERSION={{MFMODULE_VERSION}}
export MFMODULE_LOWERCASE={{MFMODULE|lower}}

# Set a good default value for MFMODULE_RUNTIME_SUFFIX if necessary
if ! test "$(whoami)" = "{{MFMODULE_LOWERCASE}}"; then
    if test "${MFMODULE_RUNTIME_SUFFIX}" = ""; then
        export MFMODULE_RUNTIME_SUFFIX=metwork/{{MFMODULE_LOWERCASE}}
    fi
fi

# Set MFMODULE_RUNTIME_HOME and PYTHON_EGG_CACHE
{% if MFMODULE != "MFEXT" %}
    if test "${MFMODULE_RUNTIME_USER}" = ""; then
        export MFMODULE_RUNTIME_USER=`whoami`
    fi
    if test "${MFMODULE_RUNTIME_HOME}" = ""; then
        CMD="echo ~${MFMODULE_RUNTIME_USER}"
        if test "${MFMODULE_RUNTIME_SUFFIX}" != ""; then
            CMD="${CMD}/${MFMODULE_RUNTIME_SUFFIX}"
        fi
        export MFMODULE_RUNTIME_HOME=`eval ${CMD}`
    fi
    export PYTHON_EGG_CACHE=${MFMODULE_RUNTIME_HOME}/tmp/python_cache
{% else %}
    export PYTHON_EGG_CACHE="${TMPDIR:-/tmp}/metwork_python_egg_cache"
{% endif %}
if ! test -d "${PYTHON_EGG_CACHE}"; then
    mkdir -p "${PYTHON_EGG_CACHE}"
fi

{% if MFMODULE != "MFEXT" %}
    # We set MFEXT_HOME (FIXME: necessary ?)
    export MFEXT_HOME={{MFEXT_HOME}}
    export MFEXT_VERSION={{MFEXT_VERSION}}
{% endif %}

# Get the metwork configuration name
if test "${MFCONFIG:-}" = ""; then
    MFCONFIG=$(cat /etc/metwork.config 2>/dev/null |sed 's/ //g' |grep -v '^#' |head -1)
    if test "${MFCONFIG}" = ""; then
        MFCONFIG=GENERIC
    fi
fi
export MFCONFIG

# We set LC_NUMERIC to C
export LC_NUMERIC=C

if test "${PKG_CONFIG_PATH}" = ""; then
    # We modify PKG_CONFIG_PATH
    field_prepend PKG_CONFIG_PATH /usr/lib64/pkgconfig
    field_prepend PKG_CONFIG_PATH /lib64/pkgconfig
    export PKG_CONFIG_PATH
fi

# We set the MFMODULE_VERSION environnement variable
MFMODULE_VERSION=$(cat ${MFMODULE_HOME}/config/version 2>/dev/null |head -1)
if test "${MFMODULE_VERSION}" = ""; then
    MFMODULE_VERSION=unknown
fi
export MFMODULE_VERSION

# We set the MFMODULE_STATUS environnement variable
MFMODULE_STATUS=$(cat ${MFMODULE_HOME}/var/status 2>/dev/null)
if test "${MFMODULE_STATUS}" = ""; then
    MFMODULE_STATUS=unknown
fi
export MFMODULE_STATUS

# FIXME: do not hardcode this
export PYTHON3_SHORT_VERSION=3.7
export PYTHON2_SHORT_VERSION=2.7

# We configure the layers system
field_prepend LAYERAPI2_LAYERS_PATH {{MFEXT_HOME}}
field_prepend LAYERAPI2_LAYERS_PATH {{MFEXT_HOME}}/opt
{% if MFMODULE != "MFEXT" %}
    field_prepend LAYERAPI2_LAYERS_PATH {{MFEXT_HOME}}/opt/misc
    field_prepend LAYERAPI2_LAYERS_PATH {{MFMODULE_HOME}}
    field_prepend LAYERAPI2_LAYERS_PATH {{MFMODULE_HOME}}/opt
    {% if MFMODULE == "MFSERV" or MFMODULE == "MFDATA" or MFMODULE == "MFBASE" %}
        if test "${MFMODULE_RUNTIME_HOME:-}" != ""; then
            field_prepend LAYERAPI2_LAYERS_PATH ${MFMODULE_RUNTIME_HOME}/var/plugins
        fi
    {% endif %}
{% endif %}
export LAYERAPI2_LAYERS_PATH

# We load the default layer (if installed)
N=$({{MFEXT_HOME}}/opt/core/bin/is_layer_installed default@${MFMODULE_LOWERCASE} 2>/dev/null)
if test "${N}" = "1"; then
    # note: if we are in a plugin_env, we don't load default layers (issue mfserv#220)
    if test "{% raw %}${{% endraw %}{{MFMODULE}}_CURRENT_PLUGIN_NAME:-}" = ""; then
        # We load the default layer
        layer_load default@${MFMODULE_LOWERCASE} >/dev/null
    fi
else
    # The default layer is not installed
    # => we load the root and core layer (failback for developpers)
    layer_load root@mfext >/dev/null 2>&1
    layer_load core@mfext >/dev/null 2>&1
fi

{% if MFMODULE != "MFEXT" %}
    if ! test -d ${MFMODULE_RUNTIME_HOME}; then
        mkdir -p ${MFMODULE_RUNTIME_HOME} >/dev/null 2>&1
    fi
    if ! test -d ${MFMODULE_RUNTIME_HOME}; then
        echo "ERROR: can't create ${MFMODULE_RUNTIME_HOME} directory"
        export PROFILE_ERROR=1
        unset METWORK_PROFILE_LOADING
        return 1
    fi
    for SUBDIR in config tmp var log tmp/config_auto; do
        if ! test -d ${MFMODULE_RUNTIME_HOME}/${SUBDIR}; then
            mkdir -p ${MFMODULE_RUNTIME_HOME}/${SUBDIR} >/dev/null 2>&1
            if ! test -d ${MFMODULE_RUNTIME_HOME}/${SUBDIR}; then
                echo "ERROR: can't create ${MFMODULE_RUNTIME_HOME}/${SUBDIR} directory"
                export PROFILE_ERROR=1
                unset METWORK_PROFILE_LOADING
                return 1
            fi
        fi
    done
    if test -f "/etc/metwork.config.d/{{MFMODULE|lower}}/config.ini"; then
        if ! test -L "${MFMODULE_RUNTIME_HOME}/config/config.ini"; then
            rm -f "${MFMODULE_RUNTIME_HOME}/config/config.ini"
            ln -s "/etc/metwork.config.d/{{MFMODULE|lower}}/config.ini" "${MFMODULE_RUNTIME_HOME}/config/config.ini"
        fi
    fi
    if ! test -f ${MFMODULE_RUNTIME_HOME}/config/config.ini; then
        if test -f ${MFMODULE_HOME}/config/config.ini; then
            ${MFEXT_HOME}/opt/misc/bin/_prepare_config.py >${MFMODULE_RUNTIME_HOME}/config/config.ini 2>&1
        fi
    else
        if ! test -L ${MFMODULE_HOME}/config/config.ini; then
            if test ${MFMODULE_HOME}/config/config.ini -nt ${MFMODULE_RUNTIME_HOME}/config/config.ini; then
                N=`cat ${MFMODULE_RUNTIME_HOME}/config/config.ini |grep -v '^\[' |grep -v '^#' |grep '[a-zA-Z]' |wc -l`
                if test "${N}" -eq 0; then
                    # we can override
                    ${MFEXT_HOME}/opt/misc/bin/_prepare_config.py >${MFMODULE_RUNTIME_HOME}/config/config.ini 2>&1
                fi
            fi
        fi
    fi
    if test "${METWORK_BOOTSTRAP_MODE}" != "1"; then
        {% include "nethard_profile" %}
        {% set FORCED_MODULE_HOME = "${MFMODULE_HOME}" %}
        {% set FORCED_MODULE = "${MFMODULE}" %}
        {% include "config_profile" %}
    fi
{% endif %}

# A little kind of magic to deal with [log]/json_file=AUTO
if test "{% raw %}${{% endraw %}{{MFMODULE}}_LOG_JSON_FILE{% raw %}:-}{% endraw %}" = "AUTO"; then
    if test "{% raw %}${{% endraw %}{{MFMODULE}}_ADMIN_HOSTNAME{% raw %}:-}{% endraw %}" = "null"; then
        export {{MFMODULE}}_LOG_JSON_FILE="null"
    else
        export {{MFMODULE}}_LOG_JSON_FILE="{% raw %}${MFMODULE_RUNTIME_HOME}{% endraw %}/log/json_logs.log"
    fi
fi

# FIXME: we add this for a smooth migration =>  we can remove it after a few days (2019-02-04)
export {{MFMODULE}}_LOG_DEFAULT_LEVEL="{% raw %}${{% endraw %}{{MFMODULE}}_LOG_MINIMAL_LEVEL{% raw %}}{% endraw %}"

{% if MFMODULE != "MFEXT" %}
export MFLOG_EXTRA_CONTEXT_FUNC="mflog_metwork_addon.extra_context"
export MFLOG_JSON_ONLY_KEYS="plugin"
{% endif %}

{% block custom %}
{% endblock %}

unset METWORK_PROFILE_LOADING
export METWORK_PROFILE_LOADED=1
