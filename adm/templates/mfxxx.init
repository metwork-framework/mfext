#!/bin/bash

. ${MFEXT_HOME}/lib/bash_utils.sh

if test "${1:-}" == "--help"; then
    echo "usage: {{MFMODULE_LOWERCASE}}.init"
    echo "  => (re)init your module (WARNING: can't drop some user provided datas)"
    exit 0
fi

exit_if_root

cd "${MFMODULE_RUNTIME_HOME}" || exit 1

SOFT=0
SOFT_STRING=""
if test "${1}" = "soft"; then
    SOFT=1
    SOFT_STRING="SOFT "
fi

PLUGIN_NAME=$(env |grep ^{{MFMODULE}}_CURRENT_PLUGIN_NAME |awk -F '=' '{print $2;}')
if test "${PLUGIN_NAME}" != ""; then
    echo "ERROR: you can't use {{MFMODULE_LOWERCASE}}.init inside a plugin_env"
    exit 1
fi
if test "$1" != "QUIET"; then
    LINE="*****     ${MFMODULE} ${SOFT_STRING}INITIALIZATION     *****"
    N=`echo "${LINE}" |wc -c`
    HEADER=`echo "**************************************************************" |cut -c 2-${N}`
    echo_bold "${HEADER}"
    echo_bold "${LINE}"
    echo_bold "${HEADER}"
    echo "  "
fi

MFMODULE_LOWERCASE=`echo ${MFMODULE} | tr '[:upper:]' '[:lower:]'`

echo -n "- Stopping (if running) ${MFMODULE_LOWERCASE} module..."
echo_running
${MFMODULE_LOWERCASE}.stop >/dev/null 2>&1
echo_ok

if test "${SOFT}" = "0"; then
    cleanup_directories
    mkdir -p ${MFMODULE_RUNTIME_HOME}/tmp/config_auto
fi
cleanup_pyc

{% block custom %}
# Can be replaced by mfxxx.init.custom
{% endblock %}

{% block custom_after %}
# Can be replaced by mfxxx.init.custom_after
{% endblock %}
echo " "
echo " "
exit 0
