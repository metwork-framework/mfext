#!/bin/bash

{% if MODULE != "MFADMIN" %}
ADMIN_HOSTNAME=$(env |grep "^{{MODULE}}_ADMIN_HOSTNAME=" |awk -F '=' '{print $2;}')
ADMIN_SEND_MFLOG_LOGS=$(env |grep "^{{MODULE}}_ADMIN_SEND_MFLOG_LOGS=" |awk -F '=' '{print $2;}')
{% endif %}

. ${MFEXT_HOME}/lib/bash_utils.sh

if test "${1:-}" = "--help"; then
    echo "usage {{MODULE_LOWERCASE}}.start [NOINIT]"
    echo "  => start the {{MODULE_LOWERCASE}} module"
    exit 0
fi

exit_if_root

cd "${MODULE_RUNTIME_HOME}" || exit 1

NOINIT=0
if test "${1:-}" = "NOINIT"; then
    NOINIT=1
fi

{% if MODULE not in ["MFEXT", "MFCOM"] %}
CONFIG_TARGET=$(readlink -f "${MODULE_RUNTIME_HOME}/config/config.ini" 2>/dev/null)
if test "${CONFIG_TARGET}" != ""; then
    CONFIG_TIMESTAMP=$(date -r "${CONFIG_TARGET}" +%s 2>/dev/null)
    if test "${CONFIG_TIMESTAMP}" != ""; then
        if test "{% raw %}${{% endraw %}{{MODULE}}_CONF_GENERATION_TIME{% raw %}}{% endraw %}" -lt "${CONFIG_TIMESTAMP}"; then
            echo_bold "ERROR: your environment is outdated => please reload your terminal before playing with {{MODULE_LOWERCASE}}.start/stop"
            exit 1
        fi
    fi
fi
{% endif %}

STARTUP_FLAG=`env |grep "^${MODULE}_STARTUP_FLAG=" |awk -F '=' '{print $2;}'`
if test "${STARTUP_FLAG}" = "0"; then
    echo_bold "${MODULE}_STARTUP_FLAG=0 => nothing to start"
    exit 0
fi

RES=0

{% if MODULE == "MFDATA" or MODULE == "MFSERV" or MODULE == "MFBASE" %}
PLUGIN_NAME=$(env |grep ^{{MODULE}}_CURRENT_PLUGIN_NAME |awk -F '=' '{print $2;}')
if test "${PLUGIN_NAME}" != ""; then
    echo "ERROR: you can't use {{MODULE_LOWERCASE}}.start inside a plugin_env"
    exit 1
fi
if test "${NOINIT}" = "0"; then
    if ! test -d ${MODULE_RUNTIME_HOME}/var/plugins/base; then
        {{MODULE_LOWERCASE}}.init
    fi
    if ! test -d ${MODULE_RUNTIME_HOME}/var/plugins/base; then
        echo "ERROR: plugin system not initialized"
        exit 1
    fi
    _install_or_update_configured_plugins.py
fi
{% endif %}

{% if MODULE == "MFADMIN" %}
if test "${NOINIT}" = "0"; then
    NEED_INIT=0
    if test "${MFADMIN_LAYER_METRICS_LOADED:-}" = "1"; then
        if ! test -f "${MODULE_RUNTIME_HOME}/var/grafana/grafana.db"; then
            NEED_INIT=1
        fi
    fi
    if test "${MFADMIN_LAYER_LOGS_LOADED:-}" = "1"; then
        if ! test -f "${MODULE_RUNTIME_HOME}/var/kibana/uuid"; then
            NEED_INIT=1
        fi
    fi
    if test "${NEED_INIT}" = "1"; then
        {{MODULE_LOWERCASE}}.init
    fi
fi
{% endif %}

LINE="*****     STARTING ${MODULE}     *****"
N=`echo "${LINE}" |wc -c`
HEADER=`echo "**************************************************************" |cut -c 2-${N}`
echo_bold "${HEADER}"
echo_bold "${LINE}"
echo_bold "${HEADER}"
echo "  "

echo STARTING >${MODULE_RUNTIME_HOME}/var/status

if test -f ${MODULE_HOME}/config/logrotate.conf; then
    echo -n "- Generating logrotate.conf..."
    echo_running
    cat ${MODULE_HOME}/config/logrotate.conf |envtpl --reduce-multi-blank-lines >${MODULE_RUNTIME_HOME}/tmp/config_auto/logrotate.conf
    if test -f ${MODULE_RUNTIME_HOME}/tmp/config_auto/logrotate.conf; then
        echo_ok
    else
        echo_nok
    fi
fi
{% block custom_before_circus %}
# Can be replaced by mfxxx.start.custom
{% endblock %}

if test "${RES}" = "0"; then

    if test -f ${MODULE_HOME}/config/circus.ini; then
        _circus.start
    fi

    {% block custom %}
    # Can be replaced by mfxxx.start.custom
    {% endblock %}

    _make_and_install_crontab.sh

    {% if MODULE != "MFADMIN" %}
    if test "${ADMIN_HOSTNAME}" != ""; then
        if test "${ADMIN_HOSTNAME}" != "null"; then
    {% endif %}
    _circus_wait_watcher_started.sh telegraf || RES=1
    _circus_wait_watcher_started.sh telegraf_collector_metwork_module || RES=1
    {% if MODULE != "MFADMIN" %}
        fi
    fi
    {% endif %}

    {% if MODULE != "MFADMIN" %}
    if test "${ADMIN_SEND_MFLOG_LOGS}" = "1"; then
        if test "${ADMIN_HOSTNAME}" != "null"; then
            _circus_wait_watcher_started.sh mflog2mfadmin || RES=1
        fi
    fi
    {% endif %}

    echo -n "- Wait 2 sec..."
    echo_running
    sleep 2
    echo_ok

    MODULE_LOWERCASE=`echo ${MODULE} | tr '[:upper:]' '[:lower:]'`
    ${MODULE_LOWERCASE}.status QUIET

else
    echo
    echo_bold "ERROR(S) DETECTED DURING ${MODULE} CHECK"
fi

RES=$?
if test ${RES} -eq 0; then
    echo RUNNING >${MODULE_RUNTIME_HOME}/var/status
else
    echo ERROR >${MODULE_RUNTIME_HOME}/var/status
fi

echo " "
echo " "
exit ${RES}
